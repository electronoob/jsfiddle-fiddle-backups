<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <title>jetpack</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="robots" content="noindex, nofollow">
  <meta name="googlebot" content="noindex, nofollow">
  <meta name="viewport" content="width=device-width, initial-scale=1">


  <script
    type="text/javascript"
    src="/js/lib/dummy.js"
    
  ></script>

    <link rel="stylesheet" type="text/css" href="/css/result-light.css">


  <style id="compiled-css" type="text/css">
      canvas#c {
background: rgb(0,183,234);
background: -moz-linear-gradient(top,  rgb(0,183,234) 0%, rgb(0,158,195) 100%);
background: -webkit-linear-gradient(top,  rgb(0,183,234) 0%,rgb(0,158,195) 100%);
background: linear-gradient(to bottom,  rgb(0,183,234) 0%,rgb(0,158,195) 100%);
filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00b7ea', endColorstr='#009ec3',GradientType=0 );
}
canvas{
position:absolute;
left:10px;
top: 10px;

}
  </style>


  <!-- TODO: Missing CoffeeScript 2 -->

  <script type="text/javascript">//<![CDATA[

    window.onload=function(){
      
/* overlay js*/
 var mX = 0;
 var mY = 0;
 var canvas = document.getElementById('canvas');
 var screenContext = canvas.getContext('2d');
 var ctx = document.getElementById('canvas').getContext('2d');

 var imageObj = {
   red: 255,
   green: 255,
   blue: 255
 };

 document.getElementById('canvas').addEventListener('mousemove', function(evt) {
   var mousePos = getMousePos(canvas, evt);
   mX = mousePos.x;
   mY = mousePos.y;
 }, false);

 function getMousePos(canvas, evt) {
   var rect = canvas.getBoundingClientRect();
   return {
     x: evt.clientX - rect.left,
     y: evt.clientY - rect.top
   };
 }
/*end overlay*/

var dead = 0;
var score = 0;
function death() {
score = Date.now() - starttime;
dead =1;
alert('you scored: ' + (Date.now()
 - starttime) + ' before you died');
 console.log(('you scored: ' + (Date.now()
 - starttime) + ' before you died'));
}

var starttime = Date.now();

var gctx = document.getElementById('c').getContext('2d');
var kb = {l:0,r:0,u:0,d:0};
var ai = {x: 0, y:330};
var jp = new Image();
jp.src= "http://i.imgur.com/Oj1Y3Df.png";
var deb = new Image();
deb.src= "http://i.imgur.com/O3yYl1d.png";

function draw () {
if(!dead)
score = Date.now() - starttime;

  gctx.clearRect(0,0,800,400);
  gctx.drawImage(jp, ai.x,ai.y, 32, 32);
  gctx.drawImage(jp, 800-ai.x-32,400-ai.y-32, 32 ,32);

  debris.forEach(function(d, i, a){
    gctx.drawImage(deb, d.x, d.y, 16, 16);
    gctx.fillStyle = 'rgba(0,0,0,0.2)';
    gctx.fillRect(d.x,d.y,d.z,d.z);
  });
  gctx.fillText('score: ' + score, 10,10);
  /* begin overlay drawing routines*/
   ctx.globalCompositeOperation = 'destination-under';
   ctx.clearRect(0, 0, 800, 400);
   screenContext.strokeStyle = 'rgba(' + imageObj.red + ',' + imageObj.green + ',' + imageObj.blue + ',0.4)';
   screenContext.lineWidth = 1;
   radians = Math.atan2(200 - mY, 400 - mX) + Math.PI;
   a = 400 - mX;
   b = 200 - mY;
   c = Math.sqrt(a * a + b * b);
   screenContext.beginPath();
   screenContext.arc(400, 200, c, 0, Math.PI * 2, false);
   screenContext.stroke();
   screenContext.beginPath();
   screenContext.arc(400, 200, 100, 0, radians, false);
   screenContext.stroke();
   xx = 400 + c * Math.cos(radians);
   yy = 200 + c * Math.sin(radians);
   screenContext.beginPath();
   screenContext.moveTo(400, 200);
   screenContext.lineTo(xx, yy);
   screenContext.stroke();
  /*end overlay*/
  window.requestAnimationFrame(draw);
}

function getRandomIntInclusive(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

var debris = [];
newDebris();

function newDebris() {
  var nc = [];
  nc.x = getRandomIntInclusive(820,900);
  nc.y = getRandomIntInclusive(0,390);
  nc.z = getRandomIntInclusive(2,15);
  nc.v = getRandomIntInclusive(1,5);
  debris.push(nc);
}



window.requestAnimationFrame(draw);

window.onkeydown = function (e) {
  switch(e.keyCode) {
    case 38:
      kb.u = 1;
      e.preventDefault();
      break;
    case 40:
      kb.d = 1;
      e.preventDefault();
      break;
    case 37:
      kb.l = 1;
      e.preventDefault();
      break;
    case 39:
      kb.r = 1;
      e.preventDefault();
      break;
  }
};
window.onkeyup = function (e) {
  switch(e.keyCode) {
    case 38:
      kb.u = 0;
      e.preventDefault();
      break;
    case 40:
      kb.d = 0;
      e.preventDefault();
      break;
    case 37:
      kb.l = 0;
      e.preventDefault();
      break;
    case 39:
      kb.r = 0;
      e.preventDefault();
      break;
  }
};

window.setInterval(function (){
if(dead) {
  return;
}
  newDebris();
},1000);

window.setInterval(function (){
if(dead) {
  return;
}
  debris.forEach(function(d, i, a){
    a[i].x -= a[i].v;
    if(a[i].x < -60) {
      debris.splice(i,1);
      if(debris.length<10) {
      	newDebris();
      }
    }
  });
},30);


window.setInterval(function(){
if(dead) {
  return;
}
  // collisions
  //player x, y, size, size
  //ai.x,ai.y, 32, 32
  //mirror x y size size
  //800-ai.x-32, 400-ai.y-32, 32 ,32);
  
  debris.forEach(function(d, i, a){
    hitplayer = Math.hypot(d.x-ai.x, d.y-ai.y);
    hitmirror = Math.hypot(d.x-(800-ai.x-32), d.y-(400-ai.y-32));
    if (hitplayer < 28) {death();}
    if (hitmirror < 28) {death();}
  });
}, 3);
window.setInterval(function (){
if(dead) {
  return;
}
  if (kb.u) ai.y = ai.y-2;
  if (kb.d) ai.y = ai.y+2;
  if (kb.l) ai.x = ai.x-2;
  if (kb.r) ai.x = ai.x+2;

  if(ai.x<0) ai.x=0;
  if(ai.x>760) ai.x=760;
  if(ai.y<0) ai.y=0;
  if(ai.y>360) ai.y=360;
},4);

    }

  //]]></script>

</head>
<body>
    
<canvas id=c width=800 height=400 style="z-index:1;"></canvas>
<canvas id=canvas width=800px height=400px style="z-index:2;"></canvas>

  
  <script>
    // tell the embed parent frame the height of the content
    if (window.parent && window.parent.parent){
      window.parent.parent.postMessage(["resultsFrame", {
        height: document.body.getBoundingClientRect().height,
        slug: "juzbt5mr"
      }], "*")
    }

    // always overwrite window.name, in case users try to set it manually
    window.name = "result"
  </script>
</body>
</html>
